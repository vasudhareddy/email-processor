package com.wellsfargo.mortgage.mccsa;

import com.wellsfargo.unifiedframework.core.PlatformConfigurator;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;
import org.springframework.boot.builder.SpringApplicationBuilder;

import javax.sql.DataSource;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ApplicationTest {

    @Test
    void testConfigureApplication_StaticPrivateMethod() throws Exception {
        SpringApplicationBuilder builder = new SpringApplicationBuilder();
        SpringApplicationBuilder configuredBuilder = spy(builder);

        try (MockedStatic<PlatformConfigurator> mocked = mockStatic(PlatformConfigurator.class)) {
            mocked.when(() -> PlatformConfigurator.configure(builder)).thenReturn(configuredBuilder);

            var method = Application.class.getDeclaredMethod("configureApplication", SpringApplicationBuilder.class);
            method.setAccessible(true);
            SpringApplicationBuilder result = (SpringApplicationBuilder) method.invoke(null, builder);

            assertNotNull(result);
            verify(configuredBuilder).sources(Application.class);
        }
    }

    @Test
    void testMainMethodRunsSuccessfully() throws Exception {
        try (MockedStatic<PlatformConfigurator> mocked = mockStatic(PlatformConfigurator.class)) {
            SpringApplicationBuilder mockBuilder = mock(SpringApplicationBuilder.class);

            when(mockBuilder.sources(Application.class)).thenReturn(mockBuilder);
            when(mockBuilder.run(any(String[].class))).thenReturn(null);

            mocked.when(() -> PlatformConfigurator.configure(any(SpringApplicationBuilder.class)))
                  .thenReturn(mockBuilder);

            Application.main(new String[]{"arg1"});

            verify(mockBuilder).sources(Application.class);
            verify(mockBuilder).run(any(String[].class));
        }
    }

    @Test
    void testPrimaryDataSourceProperties() {
        Application app = new Application();
        DataSourceProperties props = app.dataSourceProperties();
        assertNotNull(props);
    }

    @Test
    void testPrimaryDataSource() {
        Application app = spy(new Application());

        DataSourceProperties propsMock = mock(DataSourceProperties.class);
        DataSource dsMock = mock(DataSource.class);

        when(propsMock.initializeDataSourceBuilder()).thenReturn(() -> dsMock);
        doReturn(propsMock).when(app).dataSourceProperties();

        DataSource result = app.dataSource();
        assertNotNull(result);
    }

    @Test
    void testDevDataSourceProperties() {
        Application app = new Application();
        DataSourceProperties props = app.devDataSourceProperties();
        assertNotNull(props);
    }

    @Test
    void testDevDataSource() {
        Application app = spy(new Application());

        DataSourceProperties propsMock = mock(DataSourceProperties.class);
        DataSource dsMock = mock(DataSource.class);

        when(propsMock.initializeDataSourceBuilder()).thenReturn(() -> dsMock);
        doReturn(propsMock).when(app).devDataSourceProperties();

        DataSource result = app.devDataSource();
        assertNotNull(result);
    }

    @Test
    void testSitDataSourceProperties() {
        Application app = new Application();
        DataSourceProperties props = app.sitDataSourceProperties();
        assertNotNull(props);
    }

    @Test
    void testSitDataSource() {
        Application app = spy(new Application());

        DataSourceProperties propsMock = mock(DataSourceProperties.class);
        DataSource dsMock = mock(DataSource.class);

        when(propsMock.initializeDataSourceBuilder()).thenReturn(() -> dsMock);
        doReturn(propsMock).when(app).sitDataSourceProperties();

        DataSource result = app.sitDataSource();
        assertNotNull(result);
    }

    @Test
    void testUatDataSourceProperties() {
        Application app = new Application();
        DataSourceProperties props = app.uatDataSourceProperties();
        assertNotNull(props);
    }

    @Test
    void testUatDataSource() {
        Application app = spy(new Application());

        DataSourceProperties propsMock = mock(DataSourceProperties.class);
        DataSource dsMock = mock(DataSource.class);

        when(propsMock.initializeDataSourceBuilder()).thenReturn(() -> dsMock);
        doReturn(propsMock).when(app).uatDataSourceProperties();

        DataSource result = app.uatDataSource();
        assertNotNull(result);
    }

    @Test
    void testProdDataSourceProperties() {
        Application app = new Application();
        DataSourceProperties props = app.prodDataSourceProperties();
        assertNotNull(props);
    }

    @Test
    void testProdDataSource() {
        Application app = spy(new Application());

        DataSourceProperties propsMock = mock(DataSourceProperties.class);
        DataSource dsMock = mock(DataSource.class);

        when(propsMock.initializeDataSourceBuilder()).thenReturn(() -> dsMock);
        doReturn(propsMock).when(app).prodDataSourceProperties();

        DataSource result = app.prodDataSource();
        assertNotNull(result);
    }
}
