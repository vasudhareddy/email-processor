package com.wellsfargo.mortgage.mccsa;

import com.wellsfargo.unifiedframework.core.PlatformConfigurator;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.builder.SpringApplicationBuilder;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ApplicationTest {

    @Test
    void testConfigureApplication_StaticPrivateMethod() {
        // Arrange
        SpringApplicationBuilder builder = new SpringApplicationBuilder();
        SpringApplicationBuilder configuredBuilder = spy(builder);

        try (MockedStatic<PlatformConfigurator> mockedStatic = mockStatic(PlatformConfigurator.class)) {
            mockedStatic.when(() -> PlatformConfigurator.configure(builder)).thenReturn(configuredBuilder);

            // Act
            SpringApplicationBuilder result = invokeConfigureApplication(builder);

            // Assert
            assertNotNull(result);
            verify(configuredBuilder).sources(Application.class);
        }
    }

    @Test
    void testMainMethod_StaticCall() {
        try (MockedStatic<PlatformConfigurator> mockedStatic = mockStatic(PlatformConfigurator.class)) {
            SpringApplicationBuilder mockBuilder = mock(SpringApplicationBuilder.class);

            // Mocking behavior
            when(mockBuilder.sources(Application.class)).thenReturn(mockBuilder);
            when(mockBuilder.run(any(String[].class))).thenReturn(null);

            mockedStatic.when(() -> PlatformConfigurator.configure(any(SpringApplicationBuilder.class)))
                        .thenReturn(mockBuilder);

            // Act
            Application.main(new String[]{"arg1", "arg2"});

            // Verify
            verify(mockBuilder).sources(Application.class);
            verify(mockBuilder).run(any(String[].class));
        } catch (Exception e) {
            throw new RuntimeException("main method threw an exception", e);
        }
    }

    // Helper to call private static method via reflection (optional, if configureApplication is private)
    private SpringApplicationBuilder invokeConfigureApplication(SpringApplicationBuilder builder) {
        try {
            var method = Application.class.getDeclaredMethod("configureApplication", SpringApplicationBuilder.class);
            method.setAccessible(true);
            return (SpringApplicationBuilder) method.invoke(null, builder);
        } catch (Exception e) {
            throw new RuntimeException("Failed to invoke configureApplication", e);
        }
    }
}
